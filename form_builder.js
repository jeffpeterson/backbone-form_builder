// Generated by CoffeeScript 1.6.3
(function() {
  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  Backbone.FormBuilder = (function() {
    function FormBuilder(model) {
      this.model = model;
    }

    FormBuilder.prototype.text_field = function(attribute, options) {
      return this.input('text', attribute, options);
    };

    FormBuilder.prototype.password_field = function(attribute, options) {
      return this.input('password', attribute, options);
    };

    FormBuilder.prototype.text_area = function(attribute, options) {
      return this.input('textarea', attribute, options);
    };

    FormBuilder.prototype.checkbox = function(attribute, options) {
      if (options == null) {
        options = {};
      }
      if (this.model.get(attribute)) {
        options.checked = "checked";
      } else {
        delete options.checked;
      }
      return this.input('checkbox', attribute, options);
    };

    FormBuilder.prototype.label = function(attribute, body, options) {
      var label, _ref;
      if (body == null) {
        body = attribute;
      }
      if (options == null) {
        options = {};
      }
      _.defaults(options, {
        "class": "" + attribute + "_label",
        "for": this.id_for(attribute)
      });
      label = this.new_el('label', options, body);
      if ((_ref = this.model.validationError) != null ? _ref[attribute] : void 0) {
        label.addClass('error');
      }
      return this.new_el('p', {}, label).html();
    };

    FormBuilder.prototype.submit = function(value, options) {
      var $el;
      if (options == null) {
        options = {};
      }
      _.defaults(options, {
        type: 'submit',
        value: value,
        "class": 'submit'
      });
      $el = this.new_el('input', options);
      return this.new_el('p', {}, $el).html();
    };

    FormBuilder.prototype.select = function(attribute, choices, options) {
      var attrs, name, select, value;
      if (choices == null) {
        choices = {};
      }
      if (options == null) {
        options = {};
      }
      _.defaults(options, {
        include_blank: false
      });
      select = this.new_el('select', {
        name: attribute
      });
      for (value in choices) {
        name = choices[value];
        attrs = {
          value: value
        };
        if (this.model.get(attribute) === value) {
          attrs.selected = "selected";
        }
        select.append(this.new_el('option', attrs, name));
      }
      return this.new_el('p', {}, select).html();
    };

    FormBuilder.prototype.input = function(type, attribute, options) {
      var field, _ref;
      if (options == null) {
        options = {};
      }
      _.defaults(options, {
        name: attribute,
        "class": attribute,
        placeholder: attribute.split("_").join(" ").capitalize(),
        type: type,
        value: this.model.get(attribute),
        id: this.id_for(attribute),
        size: 30
      });
      field = (function() {
        switch (type) {
          case 'textarea':
            options.text = options.value;
            options.value = null;
            return this.new_el('textarea', options);
          default:
            return this.new_el('input', options);
        }
      }).call(this);
      if ((_ref = this.model.validationError) != null ? _ref[attribute] : void 0) {
        field.addClass('error');
      }
      return this.new_el('p', {}, field).html();
    };

    FormBuilder.prototype.id_for = function(attribute) {
      return "" + (this.model.constructor.name.toLowerCase()) + "_" + attribute;
    };

    FormBuilder.prototype.errors_for = function(attribute, options) {
      var el, errors, _ref;
      if (errors = (_ref = this.model.validationError) != null ? _ref[attribute] : void 0) {
        el = this.new_el('span', {
          "class": 'error'
        }, errors);
        return this.new_el('p', {}, el).html();
      }
    };

    FormBuilder.prototype.new_el = function(tag_name, attributes, body) {
      if (attributes == null) {
        attributes = {};
      }
      return $("<" + tag_name + " />", attributes).html((typeof body === "function" ? body(this) : void 0) || body);
    };

    return FormBuilder;

  })();

  Backbone.FormBuilder.form_for = window.form_for = function(model, options, body) {
    var form, form_builder;
    form_builder = new Backbone.FormBuilder(model);
    if (!body) {
      body = options;
      options = {};
    }
    _.defaults(options, {
      method: model.isNew() ? 'post' : 'put',
      action: (typeof model.url === "function" ? model.url() : void 0) || model.url
    });
    form = form_builder.new_el('form', options, body);
    form.prop('outerHTML');
    return $('<p>').append(form).html();
  };

}).call(this);
